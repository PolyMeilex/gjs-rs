// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, Context};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    ///
    ///
    /// ## Properties
    ///
    ///
    /// #### `cache`
    ///  Writeable | Construct Only
    ///
    ///
    /// #### `context`
    ///  Writeable | Construct Only
    ///
    ///
    /// #### `output-directory`
    ///  Writeable | Construct Only
    ///
    ///
    /// #### `prefixes`
    ///  Writeable | Construct Only
    #[doc(alias = "GjsCoverage")]
    pub struct Coverage(Object<ffi::GjsCoverage, ffi::GjsCoverageClass>);

    match fn {
        type_ => || ffi::gjs_coverage_get_type(),
    }
}

impl Coverage {
    /// Creates a new [`Coverage`][crate::Coverage] object that collects coverage information for
    /// any scripts run in `context`.
    ///
    /// Scripts which were provided as part of `prefixes` will be written out to
    /// `output_dir`, in the same directory structure relative to the source dir where
    /// the tests were run.
    /// ## `prefixes`
    /// A null-terminated strv of prefixes of files on which to record
    /// code coverage
    /// ## `context`
    /// A [`Context`][crate::Context] object
    /// ## `output_dir`
    /// A [`gio::File`][crate::gio::File] handle to a directory in which to write coverage
    /// information
    ///
    /// # Returns
    ///
    /// A [`Coverage`][crate::Coverage] object
    #[doc(alias = "gjs_coverage_new")]
    pub fn new(prefixes: &[&str], context: &Context, output_dir: &impl IsA<gio::File>) -> Coverage {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gjs_coverage_new(
                prefixes.to_glib_none().0,
                context.to_glib_none().0,
                output_dir.as_ref().to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`Coverage`] objects.
    ///
    /// This method returns an instance of [`CoverageBuilder`](crate::builders::CoverageBuilder) which can be used to create [`Coverage`] objects.
    pub fn builder() -> CoverageBuilder {
        CoverageBuilder::new()
    }

    /// Scripts which were provided as part of the [`prefixes`][struct@crate::Coverage#prefixes]
    /// construction property will be written out to `output_directory`, in the same
    /// directory structure relative to the source dir where the tests were run.
    ///
    /// This function takes all available statistics and writes them out to either
    /// the file provided or to files of the pattern (filename).info in the same
    /// directory as the scanned files. It will provide coverage data for all files
    /// ending with ".js" in the coverage directories.
    #[doc(alias = "gjs_coverage_write_statistics")]
    pub fn write_statistics(&self) {
        unsafe {
            ffi::gjs_coverage_write_statistics(self.to_glib_none().0);
        }
    }

    /// This function must be called before creating any [`Context`][crate::Context], if you intend
    /// to use any [`Coverage`][crate::Coverage] APIs.
    #[cfg(feature = "v1_66")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v1_66")))]
    #[doc(alias = "gjs_coverage_enable")]
    pub fn enable() {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gjs_coverage_enable();
        }
    }
}

impl Default for Coverage {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`Coverage`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct CoverageBuilder {
    builder: glib::object::ObjectBuilder<'static, Coverage>,
}

impl CoverageBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn cache(self, cache: &impl IsA<gio::File>) -> Self {
        Self {
            builder: self.builder.property("cache", cache.clone().upcast()),
        }
    }

    pub fn context(self, context: &Context) -> Self {
        Self {
            builder: self.builder.property("context", context.clone()),
        }
    }

    pub fn output_directory(self, output_directory: &impl IsA<gio::File>) -> Self {
        Self {
            builder: self
                .builder
                .property("output-directory", output_directory.clone().upcast()),
        }
    }

    pub fn prefixes(self, prefixes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("prefixes", prefixes.into()),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`Coverage`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Coverage {
        self.builder.build()
    }
}
