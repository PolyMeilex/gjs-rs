// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GjsError")]
pub enum Error {
    #[doc(alias = "GJS_ERROR_FAILED")]
    Failed,
    #[doc(alias = "GJS_ERROR_SYSTEM_EXIT")]
    SystemExit,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for Error {
    type GlibType = ffi::GjsError;

    #[inline]
    fn into_glib(self) -> ffi::GjsError {
        match self {
            Self::Failed => ffi::GJS_ERROR_FAILED,
            Self::SystemExit => ffi::GJS_ERROR_SYSTEM_EXIT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GjsError> for Error {
    #[inline]
    unsafe fn from_glib(value: ffi::GjsError) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GJS_ERROR_FAILED => Self::Failed,
            ffi::GJS_ERROR_SYSTEM_EXIT => Self::SystemExit,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for Error {
    #[inline]
    fn domain() -> glib::Quark {
        skip_assert_initialized!();

        unsafe { from_glib(ffi::gjs_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match unsafe { from_glib(code) } {
            Self::__Unknown(_) => Some(Self::Failed),
            value => Some(value),
        }
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GjsJSError")]
pub enum JSError {
    #[doc(alias = "GJS_JS_ERROR_ERROR")]
    Error,
    #[doc(alias = "GJS_JS_ERROR_EVAL_ERROR")]
    EvalError,
    #[doc(alias = "GJS_JS_ERROR_INTERNAL_ERROR")]
    InternalError,
    #[doc(alias = "GJS_JS_ERROR_RANGE_ERROR")]
    RangeError,
    #[doc(alias = "GJS_JS_ERROR_REFERENCE_ERROR")]
    ReferenceError,
    #[doc(alias = "GJS_JS_ERROR_STOP_ITERATION")]
    StopIteration,
    #[doc(alias = "GJS_JS_ERROR_SYNTAX_ERROR")]
    SyntaxError,
    #[doc(alias = "GJS_JS_ERROR_TYPE_ERROR")]
    TypeError,
    #[doc(alias = "GJS_JS_ERROR_URI_ERROR")]
    UriError,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for JSError {
    type GlibType = ffi::GjsJSError;

    #[inline]
    fn into_glib(self) -> ffi::GjsJSError {
        match self {
            Self::Error => ffi::GJS_JS_ERROR_ERROR,
            Self::EvalError => ffi::GJS_JS_ERROR_EVAL_ERROR,
            Self::InternalError => ffi::GJS_JS_ERROR_INTERNAL_ERROR,
            Self::RangeError => ffi::GJS_JS_ERROR_RANGE_ERROR,
            Self::ReferenceError => ffi::GJS_JS_ERROR_REFERENCE_ERROR,
            Self::StopIteration => ffi::GJS_JS_ERROR_STOP_ITERATION,
            Self::SyntaxError => ffi::GJS_JS_ERROR_SYNTAX_ERROR,
            Self::TypeError => ffi::GJS_JS_ERROR_TYPE_ERROR,
            Self::UriError => ffi::GJS_JS_ERROR_URI_ERROR,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GjsJSError> for JSError {
    #[inline]
    unsafe fn from_glib(value: ffi::GjsJSError) -> Self {
        skip_assert_initialized!();

        match value {
            ffi::GJS_JS_ERROR_ERROR => Self::Error,
            ffi::GJS_JS_ERROR_EVAL_ERROR => Self::EvalError,
            ffi::GJS_JS_ERROR_INTERNAL_ERROR => Self::InternalError,
            ffi::GJS_JS_ERROR_RANGE_ERROR => Self::RangeError,
            ffi::GJS_JS_ERROR_REFERENCE_ERROR => Self::ReferenceError,
            ffi::GJS_JS_ERROR_STOP_ITERATION => Self::StopIteration,
            ffi::GJS_JS_ERROR_SYNTAX_ERROR => Self::SyntaxError,
            ffi::GJS_JS_ERROR_TYPE_ERROR => Self::TypeError,
            ffi::GJS_JS_ERROR_URI_ERROR => Self::UriError,
            value => Self::__Unknown(value),
        }
    }
}

impl glib::error::ErrorDomain for JSError {
    #[inline]
    fn domain() -> glib::Quark {
        skip_assert_initialized!();

        unsafe { from_glib(ffi::gjs_js_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match unsafe { from_glib(code) } {
            value => Some(value),
        }
    }
}

impl StaticType for JSError {
    #[inline]
    #[doc(alias = "gjs_js_error_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gjs_js_error_get_type()) }
    }
}

impl glib::HasParamSpec for JSError {
    type ParamSpec = glib::ParamSpecEnum;
    type SetValue = Self;
    type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder_with_default
    }
}

impl glib::value::ValueType for JSError {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for JSError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for JSError {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<JSError> for glib::Value {
    #[inline]
    fn from(v: JSError) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}
